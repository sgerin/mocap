/*****************************************************************************
*                                                                            *
*  OpenNI 1.x Alpha                                                          *
*  Copyright (C) 2012 PrimeSense Ltd.                                        *
*                                                                            *
*  This file is part of OpenNI.                                              *
*                                                                            *
*  Licensed under the Apache License, Version 2.0 (the "License");           *
*  you may not use this file except in compliance with the License.          *
*  You may obtain a copy of the License at                                   *
*                                                                            *
*      http://www.apache.org/licenses/LICENSE-2.0                            *
*                                                                            *
*  Unless required by applicable law or agreed to in writing, software       *
*  distributed under the License is distributed on an "AS IS" BASIS,         *
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *
*  See the License for the specific language governing permissions and       *
*  limitations under the License.                                            *
*                                                                            *
*****************************************************************************/
//---------------------------------------------------------------------------
// Includes
//---------------------------------------------------------------------------
#include <cmath>
#include <XnOpenNI.h>
#include <XnCodecIDs.h>
#include <XnCppWrapper.h>
#include <XnPropNames.h>

#include <GL/glut.h>
#include <map>

extern xn::UserGenerator g_UserGenerator;
extern xn::DepthGenerator g_DepthGenerator;

extern XnBool g_bDrawBackground;
extern XnBool g_bDrawPixels;
extern XnBool g_bDrawSkeleton;
extern XnBool g_bPrintID;
extern XnBool g_bPrintState;

extern XnBool g_bPrintFrameID;
extern XnBool g_bMarkJoints;
XnUInt32 nColors = 10;
XnFloat Colors[][3] =
{
	{0,1,1},
	{0,0,1},
	{0,1,0},
	{1,1,0},
	{1,0,0},
	{1,.5,0},
	{.5,1,0},
	{0,.5,1},
	{.5,0,1},
	{1,1,.5},
	{1,1,1}
};


std::map<XnUInt32, std::pair<XnCalibrationStatus, XnPoseDetectionStatus> > m_Errors;

void XN_CALLBACK_TYPE MyCalibrationInProgress(xn::SkeletonCapability& /*capability*/, XnUserID id, XnCalibrationStatus calibrationError, void* /*pCookie*/)
{
	m_Errors[id].first = calibrationError;
}
void XN_CALLBACK_TYPE MyPoseInProgress(xn::PoseDetectionCapability& /*capability*/, const XnChar* /*strPose*/, XnUserID id, XnPoseDetectionStatus poseError, void* /*pCookie*/)
{
	m_Errors[id].second = poseError;
}

unsigned int getClosestPowerOfTwo(unsigned int n)
{
	unsigned int m = 2;
	while(m < n) m<<=1;

	return m;
}


void DrawDepthMap(const xn::DepthMetaData& dmd, const xn::SceneMetaData& smd)
{
	static bool bInitialized = false;	
	static GLuint depthTexID;
	static unsigned char* pDepthTexBuf;
	static int texWidth, texHeight;

	float topLeftX;
	float topLeftY;
	float bottomRightY;
	float bottomRightX;
	float texXpos;
	float texYpos;

	if(!bInitialized)
	{
		texWidth =  getClosestPowerOfTwo(dmd.XRes());
		texHeight = getClosestPowerOfTwo(dmd.YRes());

//		printf("Initializing depth texture: width = %d, height = %d\n", texWidth, texHeight);
//		depthTexID = initTexture((void**)&pDepthTexBuf,texWidth, texHeight) ;

//		printf("Initialized depth texture: width = %d, height = %d\n", texWidth, texHeight);
		bInitialized = true;

		topLeftX = dmd.XRes();
		topLeftY = 0;
		bottomRightY = dmd.YRes();
		bottomRightX = 0;
		texXpos =(float)dmd.XRes()/texWidth;
		texYpos  =(float)dmd.YRes()/texHeight;

		//memset(texcoords, 0, 8*sizeof(float));
		//texcoords[0] = texXpos, texcoords[1] = texYpos, texcoords[2] = texXpos, texcoords[7] = texYpos;
	}

	unsigned int nValue = 0;
	unsigned int nHistValue = 0;
	unsigned int nIndex = 0;
	unsigned int nX = 0;
	unsigned int nY = 0;
	unsigned int nNumberOfPoints = 0;
	XnUInt16 g_nXRes = dmd.XRes();
	XnUInt16 g_nYRes = dmd.YRes();

	unsigned char* pDestImage = pDepthTexBuf;

	const XnDepthPixel* pDepth = dmd.Data();
	const XnLabel* pLabels = smd.Data();

	static unsigned int nZRes = dmd.ZRes();
	static float* pDepthHist = (float*)malloc(nZRes* sizeof(float));

	// Calculate the accumulative histogram
	memset(pDepthHist, 0, nZRes*sizeof(float));
	for (nY=0; nY<g_nYRes; nY++)
	{
		for (nX=0; nX<g_nXRes; nX++)
		{
			nValue = *pDepth;

			if (nValue != 0)
			{
				pDepthHist[nValue]++;
				nNumberOfPoints++;
			}

			pDepth++;
		}
	}

	for (nIndex=1; nIndex<nZRes; nIndex++)
	{
		pDepthHist[nIndex] += pDepthHist[nIndex-1];
	}
	if (nNumberOfPoints)
	{
		for (nIndex=1; nIndex<nZRes; nIndex++)
		{
			pDepthHist[nIndex] = (unsigned int)(256 * (1.0f - (pDepthHist[nIndex] / nNumberOfPoints)));
		}
	}

	pDepth = dmd.Data();
	if (g_bDrawPixels)
	{
		XnUInt32 nIndex = 0;
		// Prepare the texture map
		for (nY=0; nY<g_nYRes; nY++)
		{
			for (nX=0; nX < g_nXRes; nX++, nIndex++)
			{

				pDestImage[0] = 0;
				pDestImage[1] = 0;
				pDestImage[2] = 0;
				if (g_bDrawBackground || *pLabels != 0)
				{
					nValue = *pDepth;
					XnLabel label = *pLabels;
					XnUInt32 nColorID = label % nColors;
					if (label == 0)
					{
						nColorID = nColors;
					}

					if (nValue != 0)
					{
						nHistValue = pDepthHist[nValue];

						pDestImage[0] = nHistValue * Colors[nColorID][0]; 
						pDestImage[1] = nHistValue * Colors[nColorID][1];
						pDestImage[2] = nHistValue * Colors[nColorID][2];
					}
				}

				pDepth++;
				pLabels++;
				pDestImage+=3;
			}

			pDestImage += (texWidth - g_nXRes) *3;
		}
	}
	else
	{
		xnOSMemSet(pDepthTexBuf, 0, 3*2*g_nXRes*g_nYRes);
	}
	
	char strLabel[50] = "";
	XnUserID aUsers[15];
	XnUInt16 nUsers = 15;
	g_UserGenerator.GetUsers(aUsers, nUsers);
	for (int i = 0; i < nUsers; ++i)
	{
	if (g_bDrawSkeleton && g_UserGenerator.GetSkeletonCap().IsTracking(aUsers[i])){
	  glColor4f(1-Colors[aUsers[i]%nColors][0], 1-Colors[aUsers[i]%nColors][1], 1-Colors[aUsers[i]%nColors][2], 1);
	




	}
	}

// 	glBindTexture(GL_TEXTURE_2D, depthTexID);
// 	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, texWidth, texHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, pDepthTexBuf);

// 	// Display the OpenGL texture map
// 	glColor4f(0.75,0.75,0.75,1);

// 	glEnable(GL_TEXTURE_2D);
// 	DrawTexture(dmd.XRes(),dmd.YRes(),0,0);	
// 	glDisable(GL_TEXTURE_2D);

// 	char strLabel[50] = "";
// 	XnUserID aUsers[15];
// 	XnUInt16 nUsers = 15;
// 	g_UserGenerator.GetUsers(aUsers, nUsers);
// 	for (int i = 0; i < nUsers; ++i)
// 	{
// #ifndef USE_GLES
// 		if (g_bPrintID)
// 		{
// 			XnPoint3D com;
// 			g_UserGenerator.GetCoM(aUsers[i], com);
// 			g_DepthGenerator.ConvertRealWorldToProjective(1, &com, &com);

// 			XnUInt32 nDummy = 0;

// 			xnOSMemSet(strLabel, 0, sizeof(strLabel));
// 			if (!g_bPrintState)
// 			{
// 				// Tracking
// 				xnOSStrFormat(strLabel, sizeof(strLabel), &nDummy, "%d", aUsers[i]);
// 			}
// 			else if (g_UserGenerator.GetSkeletonCap().IsTracking(aUsers[i]))
// 			{
// 				// Tracking
// 				xnOSStrFormat(strLabel, sizeof(strLabel), &nDummy, "%d - Tracking", aUsers[i]);
// 			}
// 			else if (g_UserGenerator.GetSkeletonCap().IsCalibrating(aUsers[i]))
// 			{
// 				// Calibrating
// 				xnOSStrFormat(strLabel, sizeof(strLabel), &nDummy, "%d - Calibrating [%s]", aUsers[i], GetCalibrationErrorString(m_Errors[aUsers[i]].first));
// 			}
// 			else
// 			{
// 				// Nothing
// 				xnOSStrFormat(strLabel, sizeof(strLabel), &nDummy, "%d - Looking for pose [%s]", aUsers[i], GetPoseErrorString(m_Errors[aUsers[i]].second));
// 			}


// 			glColor4f(1-Colors[i%nColors][0], 1-Colors[i%nColors][1], 1-Colors[i%nColors][2], 1);

// 			glRasterPos2i(com.X, com.Y);
// 			glPrintString(GLUT_BITMAP_HELVETICA_18, strLabel);
// 		}
// #endif
// 		if (g_bDrawSkeleton && g_UserGenerator.GetSkeletonCap().IsTracking(aUsers[i]))
// 		{
// 			glColor4f(1-Colors[aUsers[i]%nColors][0], 1-Colors[aUsers[i]%nColors][1], 1-Colors[aUsers[i]%nColors][2], 1);

// 			// Draw Joints
// 			if (g_bMarkJoints)
// 			{
// 				// Try to draw all joints
// 				DrawJoint(aUsers[i], XN_SKEL_HEAD);
// 				DrawJoint(aUsers[i], XN_SKEL_NECK);
// 				DrawJoint(aUsers[i], XN_SKEL_TORSO);
// 				DrawJoint(aUsers[i], XN_SKEL_WAIST);

// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_COLLAR);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_SHOULDER);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_ELBOW);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_WRIST);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_HAND);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_FINGERTIP);

// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_COLLAR);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_SHOULDER);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_ELBOW);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_WRIST);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_HAND);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_FINGERTIP);

// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_HIP);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_KNEE);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_ANKLE);
// 				DrawJoint(aUsers[i], XN_SKEL_LEFT_FOOT);

// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_HIP);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_KNEE);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_ANKLE);
// 				DrawJoint(aUsers[i], XN_SKEL_RIGHT_FOOT);
// 			}

// #ifndef USE_GLES
// 			glBegin(GL_LINES);
// #endif

// 			// Draw Limbs
// 			DrawLimb(aUsers[i], XN_SKEL_HEAD, XN_SKEL_NECK);

// 			DrawLimb(aUsers[i], XN_SKEL_NECK, XN_SKEL_LEFT_SHOULDER);
// 			DrawLimb(aUsers[i], XN_SKEL_LEFT_SHOULDER, XN_SKEL_LEFT_ELBOW);
// 			if (!DrawLimb(aUsers[i], XN_SKEL_LEFT_ELBOW, XN_SKEL_LEFT_WRIST))
// 			{
// 				DrawLimb(aUsers[i], XN_SKEL_LEFT_ELBOW, XN_SKEL_LEFT_HAND);
// 			}
// 			else
// 			{
// 				DrawLimb(aUsers[i], XN_SKEL_LEFT_WRIST, XN_SKEL_LEFT_HAND);
// 				DrawLimb(aUsers[i], XN_SKEL_LEFT_HAND, XN_SKEL_LEFT_FINGERTIP);
// 			}


// 			DrawLimb(aUsers[i], XN_SKEL_NECK, XN_SKEL_RIGHT_SHOULDER);
// 			DrawLimb(aUsers[i], XN_SKEL_RIGHT_SHOULDER, XN_SKEL_RIGHT_ELBOW);
// 			if (!DrawLimb(aUsers[i], XN_SKEL_RIGHT_ELBOW, XN_SKEL_RIGHT_WRIST))
// 			{
// 				DrawLimb(aUsers[i], XN_SKEL_RIGHT_ELBOW, XN_SKEL_RIGHT_HAND);
// 			}
// 			else
// 			{
// 				DrawLimb(aUsers[i], XN_SKEL_RIGHT_WRIST, XN_SKEL_RIGHT_HAND);
// 				DrawLimb(aUsers[i], XN_SKEL_RIGHT_HAND, XN_SKEL_RIGHT_FINGERTIP);
// 			}

// 			DrawLimb(aUsers[i], XN_SKEL_LEFT_SHOULDER, XN_SKEL_TORSO);
// 			DrawLimb(aUsers[i], XN_SKEL_RIGHT_SHOULDER, XN_SKEL_TORSO);

// 			DrawLimb(aUsers[i], XN_SKEL_TORSO, XN_SKEL_LEFT_HIP);
// 			DrawLimb(aUsers[i], XN_SKEL_LEFT_HIP, XN_SKEL_LEFT_KNEE);
// 			DrawLimb(aUsers[i], XN_SKEL_LEFT_KNEE, XN_SKEL_LEFT_FOOT);

// 			DrawLimb(aUsers[i], XN_SKEL_TORSO, XN_SKEL_RIGHT_HIP);
// 			DrawLimb(aUsers[i], XN_SKEL_RIGHT_HIP, XN_SKEL_RIGHT_KNEE);
// 			DrawLimb(aUsers[i], XN_SKEL_RIGHT_KNEE, XN_SKEL_RIGHT_FOOT);

// 			DrawLimb(aUsers[i], XN_SKEL_LEFT_HIP, XN_SKEL_RIGHT_HIP);
// #ifndef USE_GLES
// 			glEnd();
// #endif
// 		}
// 	}

// 	if (g_bPrintFrameID)
// 	{
// 		static XnChar strFrameID[80];
// 		xnOSMemSet(strFrameID, 0, 80);
// 		XnUInt32 nDummy = 0;
// 		xnOSStrFormat(strFrameID, sizeof(strFrameID), &nDummy, "%d", dmd.FrameID());

// 		glColor4f(1, 0, 0, 1);

// 		glRasterPos2i(10, 10);

// 		glPrintString(GLUT_BITMAP_HELVETICA_18, strFrameID);
// 	}
}
